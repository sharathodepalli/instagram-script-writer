name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Basic import tests
        run: |
          python -c "import streamlit; print('✅ Streamlit imported')"
          python -c "import openai; print('✅ OpenAI imported')" 
          python -c "from pinecone import Pinecone; print('✅ Pinecone imported')"
          python -c "import sentence_transformers; print('✅ SentenceTransformers imported')"

      - name: Run basic tests
        run: |
          python -m pytest tests/test_basic.py -v

      - name: Test Streamlit app syntax
        run: |
          python -c "
          import ast
          import sys
          
          # Test that main app file has valid Python syntax
          with open('src/app_intelligent.py', 'r') as f:
              content = f.read()
          
          try:
              ast.parse(content)
              print('✅ src/app_intelligent.py syntax is valid')
          except SyntaxError as e:
              print(f'❌ Syntax error in app_intelligent.py: {e}')
              sys.exit(1)
          "

      - name: Test startup script
        run: |
          python -c "
          import ast
          
          # Test that startup script has valid syntax
          with open('start.py', 'r') as f:
              content = f.read()
          
          try:
              ast.parse(content)
              print('✅ start.py syntax is valid')
          except SyntaxError as e:
              print(f'❌ Syntax error in start.py: {e}')
              sys.exit(1)
          "

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Test Docker build
        run: |
          # Create a simple test Dockerfile for CI
          cat > Dockerfile.test << 'EOF'
          FROM python:3.11-slim
          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          COPY . .
          CMD ["echo", "Build test successful"]
          EOF
          
          docker build -f Dockerfile.test -t instagram-script-writer:test .
          echo "✅ Docker build successful"